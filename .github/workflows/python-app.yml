name: Python application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"
      #----------------------------------------------
      #             check code with flake
      #----------------------------------------------
    - name: Lint with flake8
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
      #----------------------------------------------
      #             load cached venv
      #----------------------------------------------
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      #           install dependencies
      #----------------------------------------------
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      #----------------------------------------------
      #          install root project
      #----------------------------------------------
    - name: Install library
      run: poetry install --no-interaction
      #----------------------------------------------
      #              generate migration
      #----------------------------------------------
    - name: Create database
      run: |
        source .venv/bin/activate
        alembic revision --autogenerate -m 'Initial'
        alembic upgrade head
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
    - name: Run tests
      run: |        
        source .venv/bin/activate
        python -m pytest --cov=src tests/